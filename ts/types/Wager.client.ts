/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, ExecuteMsg, Decimal, Addr, Currency, ParamInfo, QueryMsg, ConfigResponse, Config, TokenStatus, Timestamp, Uint64, TokenStatusResponse, MatchmakingItemExport, NFT, WagerExport, WagerInfo, WagerResponse, WagersResponse } from "./Wager.types";
export interface WagerReadOnlyInterface {
  contractAddress: string;
  wagers: () => Promise<WagersResponse>;
  wager: ({
    token
  }: {
    token: Addr[][];
  }) => Promise<WagerResponse>;
  tokenStatus: ({
    token
  }: {
    token: Addr[][];
  }) => Promise<TokenStatusResponse>;
  config: () => Promise<ConfigResponse>;
}
export class WagerQueryClient implements WagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.wagers = this.wagers.bind(this);
    this.wager = this.wager.bind(this);
    this.tokenStatus = this.tokenStatus.bind(this);
    this.config = this.config.bind(this);
  }

  wagers = async (): Promise<WagersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      wagers: {}
    });
  };
  wager = async ({
    token
  }: {
    token: Addr[][];
  }): Promise<WagerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      wager: {
        token
      }
    });
  };
  tokenStatus = async ({
    token
  }: {
    token: Addr[][];
  }): Promise<TokenStatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_status: {
        token
      }
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface WagerInterface extends WagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    params
  }: {
    params: ParamInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setWinner: ({
    currentPrices,
    prevPrices,
    wagerKey
  }: {
    currentPrices: Decimal[][];
    prevPrices: Decimal[][];
    wagerKey: Addr[][];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  wager: ({
    againstCurrencies,
    currency,
    expiry,
    token
  }: {
    againstCurrencies: Currency[];
    currency: Currency;
    expiry: number;
    token: Addr[][];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancel: ({
    token
  }: {
    token: Addr[][];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WagerClient extends WagerQueryClient implements WagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.setWinner = this.setWinner.bind(this);
    this.wager = this.wager.bind(this);
    this.cancel = this.cancel.bind(this);
  }

  updateConfig = async ({
    params
  }: {
    params: ParamInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        params
      }
    }, fee, memo, funds);
  };
  setWinner = async ({
    currentPrices,
    prevPrices,
    wagerKey
  }: {
    currentPrices: Decimal[][];
    prevPrices: Decimal[][];
    wagerKey: Addr[][];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_winner: {
        current_prices: currentPrices,
        prev_prices: prevPrices,
        wager_key: wagerKey
      }
    }, fee, memo, funds);
  };
  wager = async ({
    againstCurrencies,
    currency,
    expiry,
    token
  }: {
    againstCurrencies: Currency[];
    currency: Currency;
    expiry: number;
    token: Addr[][];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      wager: {
        against_currencies: againstCurrencies,
        currency,
        expiry,
        token
      }
    }, fee, memo, funds);
  };
  cancel = async ({
    token
  }: {
    token: Addr[][];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel: {
        token
      }
    }, fee, memo, funds);
  };
}